# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ImgClassify_pb2 as ImgClassify__pb2


class ClassifyServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ClassifyImages = channel.stream_stream(
        '/gesture_rpc.ClassifyService/ClassifyImages',
        request_serializer=ImgClassify__pb2.imgs.SerializeToString,
        response_deserializer=ImgClassify__pb2.classified.FromString,
        )


class ClassifyServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ClassifyImages(self, request_iterator, context):
    """BiDi Streaming
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ClassifyServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ClassifyImages': grpc.stream_stream_rpc_method_handler(
          servicer.ClassifyImages,
          request_deserializer=ImgClassify__pb2.imgs.FromString,
          response_serializer=ImgClassify__pb2.classified.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gesture_rpc.ClassifyService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
